{
	"id": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
	"name": "APIAutomation_N26",
	"description": "Automation of the BestBuy APIs to show capability of API automation for N26 Test",
	"order": [],
	"folders": [
		{
			"name": "Categories",
			"description": "Find, create, update and remove product categories",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"order": [
				"9c449940-204b-3628-cdb1-9b5115c201cb",
				"76621c65-8f25-9e41-2e55-ad8d9e63cb71",
				"0db35a52-4a2c-8711-4dc6-559cf438fc60",
				"d4f585ae-7761-0a14-eec1-8e4edcc5a65c",
				"70d7d8fc-a811-ab2c-05df-4d9ab977f885",
				"2189a624-fe76-0e15-e66f-4dde3ecd0770",
				"608c7fb5-7b02-1235-8a42-310396bb145d"
			],
			"owner": 0,
			"folders_order": [],
			"id": "d7b03691-76f6-6c70-6879-95f0cae37052"
		},
		{
			"name": "Products",
			"description": "This API is used to Find, create, update and remove products",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"order": [
				"c7efbcb9-cafa-efcf-3159-c25d8d243cf2",
				"6ab7cb8d-3a3a-fe92-0252-d88a2c713247",
				"4187a7b2-0380-c8f1-1b35-df919efc83f6",
				"1e1a1ec1-e8e3-cf5f-65d2-1da501f795eb",
				"53c8594c-624e-837d-74b9-3866d0046398",
				"96c3bd0d-9d9f-3600-20d4-45b1732f7397",
				"ec404985-20bd-e620-507c-82da0f4dcc5c",
				"9df50134-a679-9467-38c7-4c11752dcbc8",
				"bd198a23-ab7d-fc1c-0b46-1abd178ae865"
			],
			"owner": 0,
			"folders_order": [],
			"id": "320c6f0a-a473-efeb-9ff0-d7d669908055"
		},
		{
			"name": "Services",
			"description": "Find, create, update and remove in-store services",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"order": [
				"d586ba92-2669-6ca3-a8ad-476c85b053f2",
				"c27204d2-429b-191e-e494-72baee20c2c7",
				"87928d22-6b28-59d1-b84d-6b95ad34ca8d",
				"34461a8a-5795-3725-e7c5-a223845c9061",
				"57e8d1f4-db98-249e-419e-b2678bc3f3a4",
				"fbff57ff-8687-9d3a-19d7-0667f0541e94",
				"2b08ddf1-0df2-6a4c-6898-41aa2899b37a"
			],
			"owner": 0,
			"folders_order": [],
			"id": "def6c25a-e326-20b9-729a-6ea608252a58"
		},
		{
			"name": "Stores",
			"description": "Find, create, update and remove stores",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"order": [
				"bf6b220d-175e-bcaf-1434-d54cdff96979",
				"637a4e6c-9ce8-ad21-6628-5c1c16149762",
				"6805922a-e0e9-749b-9654-ea5906aa18ea",
				"cd0dbd4f-ab64-74b8-810a-79a034fc064d",
				"f4447433-fc7d-2097-9524-9350d8c43fb4",
				"c163744b-a8f8-bce2-2082-232b8718d5ed",
				"8d82e414-9122-2cfe-7e93-c08434831edf",
				"40a9e353-fae9-21df-d116-5bb9db9d76ac",
				"fbf3fe3e-c058-c923-6e98-120b0bfe7d19"
			],
			"owner": 0,
			"folders_order": [],
			"id": "13a4646b-8ca8-ddc7-69ef-60020e3996e4"
		},
		{
			"name": "Utilities",
			"description": "",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"order": [
				"d35bfdb5-9e8f-d24a-8d30-81e2663d612d",
				"1eff7aa5-dacf-a88d-07de-9a852ada1570"
			],
			"owner": 0,
			"folders_order": [],
			"id": "4bbb0c40-3c43-6758-d013-41f1f7ee18eb"
		}
	],
	"folders_order": [
		"320c6f0a-a473-efeb-9ff0-d7d669908055",
		"13a4646b-8ca8-ddc7-69ef-60020e3996e4",
		"def6c25a-e326-20b9-729a-6ea608252a58",
		"d7b03691-76f6-6c70-6879-95f0cae37052",
		"4bbb0c40-3c43-6758-d013-41f1f7ee18eb"
	],
	"timestamp": 1519456965994,
	"owner": 0,
	"public": false,
	"requests": [
		{
			"id": "0db35a52-4a2c-8711-4dc6-559cf438fc60",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/categories/Test02",
			"folder": "d7b03691-76f6-6c70-6879-95f0cae37052",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema ={\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"id\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n \n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//dynamically saving the new category id generated in NewCategoryId Environment variable\npostman.setEnvironmentVariable(\"NewCategoryId\", jsonData.id);\n\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\ntests[\"data array is present with subCategories variable\"] = responseBody.has(\"subCategories\");\ntests[\"data array is present with categoryPath variable\"] = responseBody.has(\"categoryPath\");\n\n\n//verify json values for first category\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Category02\";\ntests[\"Value of name variable should be \"+jsonData.id] = jsonData.id===\"Test02\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573418605,
			"name": "Get a single category using category id",
			"description": "Get a single category using category id",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "1e1a1ec1-e8e3-cf5f-65d2-1da501f795eb",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/products/{{NewProductId}}",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the DELETE request is correctly processed\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"type\": {\n      \"type\": \"string\",\n      },\n    \"price\": {\n      \"type\": \"integer\",\n      },\n    \"upc\": {\n      \"type\": \"string\",\n      },\n    \"shipping\": {\n      \"type\": \"integer\",\n      },\n    \"description\": {\n      \"type\": \"string\",\n      },\n    \"manufacturer\": {\n      \"type\": \"string\",\n      },\n    \"model\": {\n      \"type\": \"string\",\n      },\n    \"url\": {\n      \"type\": \"null\",\n      },\n    \"image\": {\n      \"type\": \"null\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Verify that below mentioned variables are present\ntests[\"id is present\"] = responseBody.has(\"id\");\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"type is present\"] = responseBody.has(\"type\");\ntests[\"price is present\"] = responseBody.has(\"price\");\ntests[\"shipping is present\"] = responseBody.has(\"shipping\");\ntests[\"upc is present\"] = responseBody.has(\"upc\");\ntests[\"description is present\"] = responseBody.has(\"description\");\ntests[\"manufacturer is present\"] = responseBody.has(\"manufacturer\");\ntests[\"model is present\"] = responseBody.has(\"model\");\ntests[\"url is present\"] = responseBody.has(\"url\");\ntests[\"image is present\"] = responseBody.has(\"image\");\ntests[\"createdAt is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt is present\"] = responseBody.has(\"updatedAt\");\n\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"Electric Car\";\ntests[\"value of type variable should be \"+jsonData.type] = jsonData.type===\"Car\";\ntests[\"value of price variable should be \"+jsonData.price] = jsonData.price===898888;\ntests[\"value of shipping variable should be \"+jsonData.shipping] = jsonData.shipping===10000000;\ntests[\"value of upc variable should be \"+jsonData.upc] = jsonData.upc===\"12341234\";\ntests[\"value of description variable should be \"+jsonData.description] = jsonData.description===\"Electric car as future car\";\ntests[\"value of manufacturer variable should be \"+jsonData.manufacturer] = jsonData.manufacturer===\"Tesla\";\ntests[\"value of model variable should be \"+jsonData.model] = jsonData.model===\"ELECTRAZXI\";\ntests[\"value of url variable should be \"+jsonData.url] = jsonData.url===null;\ntests[\"value of image variable should be \"+jsonData.image] = jsonData.image===null;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573492020,
			"name": "Delete a product which was created above by POST Request",
			"description": "Deletes a single product based on the ID supplied",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "1eff7aa5-dacf-a88d-07de-9a852ada1570",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/healthcheck",
			"folder": "4bbb0c40-3c43-6758-d013-41f1f7ee18eb",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Status code: Code is 200\ntests[\"Verify the health check request is correcty processed \"] = responseCode.code === 200;\n\n//Response body: JSON value check\nvar jsonData = JSON.parse(responseBody);\n\n//Check for no of products\ntests[\"Verify the no of products\"] = jsonData.documents.products === 51991;\n\n//Check for no of stores\ntests[\"Verify the no of stores\"] = jsonData.documents.stores === 1561;\n\n//Check for no of categories\ntests[\"Verify the no of categories\"] = jsonData.documents.categories === 4307;\n\n//Verify the value of readonly parameter is false\ntests[\"Verify the value of the readonly parameter\"] = jsonData.readonly === false;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573441812,
			"name": "Get the health check information of the system",
			"description": "Returns healthcheck information about the system.\nReturns the JSON response containing:-\nNo fo products\nNo of stores\nNo of Categories",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "2189a624-fe76-0e15-e66f-4dde3ecd0770",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/categories/abcat0010000",
			"folder": "d7b03691-76f6-6c70-6879-95f0cae37052",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all categories\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema ={\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"id\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n \n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first category\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Category03\";\ntests[\"Value of name variable should be \"+jsonData.id] = jsonData.id===\"abcat0010000\";\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519574908466,
			"name": "Update the category's one variables using the category id ",
			"description": "Update the category's one variables using the category id ",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"Test Category03\"\r\n}"
		},
		{
			"id": "2b08ddf1-0df2-6a4c-6898-41aa2899b37a",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/services/1",
			"folder": "def6c25a-e326-20b9-729a-6ea608252a58",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id===1;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Testing\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573406955,
			"name": "Update the service's changed variable using the service id with original value",
			"description": "Update the service's changed variable using the service id with original value",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n   \"name\": \"Testing\"\r\n\r\n}"
		},
		{
			"id": "34461a8a-5795-3725-e7c5-a223845c9061",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/services/{{NewServiceId}}",
			"folder": "def6c25a-e326-20b9-729a-6ea608252a58",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Services\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573397669,
			"name": "Deletes a single service based on the ID supplied",
			"description": "Deletes a single service based on the ID supplied\r\n\r\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "40a9e353-fae9-21df-d116-5bb9db9d76ac",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/stores/4",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        8921\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"TestingStore\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Testing\"\n      ]\n    },\n    \"address\": {\n      \"$id\": \"/properties/address\",\n      \"type\": \"string\",\n      \"title\": \"The Address Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"India\"\n      ]\n    },\n    \"address2\": {\n      \"$id\": \"/properties/address2\",\n      \"type\": \"string\",\n      \"title\": \"The Address2 Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"\"\n      ]\n    },\n    \"city\": {\n      \"$id\": \"/properties/city\",\n      \"type\": \"string\",\n      \"title\": \"The City Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"GGN\"\n      ]\n    },\n    \"state\": {\n      \"$id\": \"/properties/state\",\n      \"type\": \"string\",\n      \"title\": \"The State Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"HAR\"\n      ]\n    },\n    \"zip\": {\n      \"$id\": \"/properties/zip\",\n      \"type\": \"string\",\n      \"title\": \"The Zip Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"122001\"\n      ]\n    },\n    \"lat\": {\n      \"$id\": \"/properties/lat\",\n      \"type\": \"number\",\n      \"title\": \"The Lat Schema\",\n      \"default\": 0,\n      \"examples\": [\n        28.45949935913086\n      ]\n    },\n    \"lng\": {\n      \"$id\": \"/properties/lng\",\n      \"type\": \"number\",\n      \"title\": \"The Lng Schema\",\n      \"default\": 0,\n      \"examples\": [\n        77.02665710449219\n      ]\n    },\n    \"hours\": {\n      \"$id\": \"/properties/hours\",\n      \"type\": \"string\",\n      \"title\": \"The Hours Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n      ]\n    },\n    \"updatedAt\": {\n      \"$id\": \"/properties/updatedAt\",\n      \"type\": \"string\",\n      \"title\": \"The Updatedat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for new store\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id==4;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"PATCH\";\ntests[\"Value of type variable should be \"+jsonData.type] = jsonData.type===\"Testing PATCH\";\ntests[\"Value of address variable should be \"+jsonData.address] = jsonData.address===\"13513 Ridgedale Dr\";\ntests[\"Value of city variable should be \"+jsonData.city] = jsonData.city===\"Hopkins\";\ntests[\"Value of state variable should be \"+jsonData.state] = jsonData.state===\"MN\";\ntests[\"Value of zip variable should be \"+jsonData.zip] = jsonData.zip===\"55305\";\ntests[\"Value of latitude variable should be \"+jsonData.lat] = jsonData.lat===44.969658;\ntests[\"Value of longitude variable should be \"+jsonData.lng] = jsonData.lng=== -93.449539;\ntests[\"Value of hours variable should be \"+jsonData.hours] = jsonData.hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573466752,
			"name": "Update the store's two variables using the store id ",
			"description": "Update the store's two variables using the store id ",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n\"name\": \"PATCH\",\r\n\"type\": \"Testing PATCH\"\r\n\r\n}"
		},
		{
			"id": "4187a7b2-0380-c8f1-1b35-df919efc83f6",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/products/{{NewProductId}}",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"type\": {\n      \"type\": \"string\",\n      },\n    \"price\": {\n      \"type\": \"integer\",\n      },\n    \"upc\": {\n      \"type\": \"string\",\n      },\n    \"shipping\": {\n      \"type\": \"integer\",\n      },\n    \"description\": {\n      \"type\": \"string\",\n      },\n    \"manufacturer\": {\n      \"type\": \"string\",\n      },\n    \"model\": {\n      \"type\": \"string\",\n      },\n    \"url\": {\n      \"type\": \"null\",\n      },\n    \"image\": {\n      \"type\": \"null\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"categories\": {\n      \"type\": \"array\"  \n  }\n } \n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n\n//Status code: Code is 200\ntests[\"Verify that the Get request for product with particular id is correctly processed\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//Verify that below mentioned variables are present\nvar jsonData = JSON.parse(responseBody);\ntests[\"id is present\"] = responseBody.has(\"id\");\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"type is present\"] = responseBody.has(\"type\");\ntests[\"price is present\"] = responseBody.has(\"price\");\ntests[\"upc is present\"] = responseBody.has(\"upc\");\ntests[\"shipping is present\"] = responseBody.has(\"shipping\");\ntests[\"description is present\"] = responseBody.has(\"description\");\ntests[\"manufacturer is present\"] = responseBody.has(\"manufacturer\");\ntests[\"model is present\"] = responseBody.has(\"model\");\ntests[\"url is present\"] = responseBody.has(\"url\");\ntests[\"image is present\"] = responseBody.has(\"image\");\ntests[\"createdAt is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt is present\"] = responseBody.has(\"updatedAt\");\ntests[\"categories is present\"] = responseBody.has(\"categories\");\n\n\n//Validate json value\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"Electric Car\";\ntests[\"value of type variable should be \"+jsonData.type] = jsonData.type===\"Car\";\ntests[\"value of price variable should be \"+jsonData.price] = jsonData.price===898888;\ntests[\"value of shipping variable should be \"+jsonData.shipping] = jsonData.shipping===10000000;\ntests[\"value of upc variable should be \"+jsonData.upc] = jsonData.upc===\"12341234\";\ntests[\"value of description variable should be \"+jsonData.description] = jsonData.description===\"Electric car as future car\";\ntests[\"value of manufacturer variable should be \"+jsonData.manufacturer] = jsonData.manufacturer===\"Tesla\";\ntests[\"value of model variable should be \"+jsonData.model] = jsonData.model===\"ELECTRAZXI\";\ntests[\"value of url variable should be \"+jsonData.url] = jsonData.url===null;\ntests[\"value of image variable should be \"+jsonData.image] = jsonData.image===null;\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573488584,
			"name": "Get a single product using product id",
			"description": "Returns a product based on an ID,\r\n\r\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "53c8594c-624e-837d-74b9-3866d0046398",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/products/{{NewProductId}}",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//To verify that product created has been deleted\n//Status code: Code is 404\ntests[\"Verify that the repeated Delete request is NOT processed\"] = responseCode.code === 404;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"NotFound\"\n      ]\n    },\n    \"message\": {\n      \"$id\": \"/properties/message\",\n      \"type\": \"string\",\n      \"title\": \"The Message Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"No record found for id '9999730'\"\n      ]\n    },\n    \"code\": {\n      \"$id\": \"/properties/code\",\n      \"type\": \"integer\",\n      \"title\": \"The Code Schema\",\n      \"default\": 0,\n      \"examples\": [\n        404\n      ]\n    },\n    \"className\": {\n      \"$id\": \"/properties/className\",\n      \"type\": \"string\",\n      \"title\": \"The Classname Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"not-found\"\n      ]\n    },\n    \"errors\": {\n      \"$id\": \"/properties/errors\",\n      \"type\": \"object\"\n    }\n  }\n}\n;\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Verify that below mentioned variables are present\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"message is present\"] = responseBody.has(\"message\");\ntests[\"code is present\"] = responseBody.has(\"code\");\ntests[\"className is present\"] = responseBody.has(\"className\");\ntests[\"errors is present\"] = responseBody.has(\"errors\");\n\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"NotFound\";\ntests[\"value of code variable should be \"+jsonData.code] = jsonData.code===404;\ntests[\"value of className variable should be \"+jsonData.className] = jsonData.className===\"not-found\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573494850,
			"name": "Try deleting the deleted Product-To verify that product created has been deleted",
			"description": "Try deleting the deleted Product-To verify that product created has been deleted",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "57e8d1f4-db98-249e-419e-b2678bc3f3a4",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/services/{{NewServiceId}}",
			"folder": "def6c25a-e326-20b9-729a-6ea608252a58",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//Status code: Code is 404\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 404;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with message variable\"] = responseBody.has(\"message\");\ntests[\"data array is present with code variable\"] = responseBody.has(\"code\");\ntests[\"data array is present with className variable\"] = responseBody.has(\"className\");\ntests[\"data array is present with errors variable\"] = responseBody.has(\"errors\");\n\n//verify json values for service deleted\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"NotFound\";\ntests[\"Value of message variable should be \"+jsonData.message] = jsonData.message===\"No record found for id '25'\";\ntests[\"Value of code variable should be \"+jsonData.code] = jsonData.code===404;\ntests[\"Value of className variable should be \"+jsonData.className] = jsonData.className===\"not-found\";\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573400493,
			"name": "Try Deleting a single service based on the ID supplied to verify that service has been deleted before",
			"description": "Try Deleting a single service based on the ID supplied to verify that service has been deleted before",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "608c7fb5-7b02-1235-8a42-310396bb145d",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/categories/abcat0010000",
			"folder": "d7b03691-76f6-6c70-6879-95f0cae37052",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all categories\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema ={\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"id\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n \n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n\n//Verify that below mentioned variables are present\nvar jsonData = JSON.parse(responseBody);\ntests[\"id variable is present\"] = responseBody.has(\"id\");\ntests[\"name variable is present\"] = responseBody.has(\"name\");\ntests[\"createdAt variable is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt variable is present\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first category\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Category02\";\ntests[\"Value of name variable should be \"+jsonData.id] = jsonData.id===\"abcat0010000\";\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519574975943,
			"name": "Update the category with original name",
			"description": "Update the category with original name",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"Test Category02\"\r\n}"
		},
		{
			"id": "637a4e6c-9ce8-ad21-6628-5c1c16149762",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/stores",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        8921\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"TestingStore\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Testing\"\n      ]\n    },\n    \"address\": {\n      \"$id\": \"/properties/address\",\n      \"type\": \"string\",\n      \"title\": \"The Address Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"India\"\n      ]\n    },\n    \"address2\": {\n      \"$id\": \"/properties/address2\",\n      \"type\": \"string\",\n      \"title\": \"The Address2 Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"\"\n      ]\n    },\n    \"city\": {\n      \"$id\": \"/properties/city\",\n      \"type\": \"string\",\n      \"title\": \"The City Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"GGN\"\n      ]\n    },\n    \"state\": {\n      \"$id\": \"/properties/state\",\n      \"type\": \"string\",\n      \"title\": \"The State Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"HAR\"\n      ]\n    },\n    \"zip\": {\n      \"$id\": \"/properties/zip\",\n      \"type\": \"string\",\n      \"title\": \"The Zip Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"122001\"\n      ]\n    },\n    \"lat\": {\n      \"$id\": \"/properties/lat\",\n      \"type\": \"number\",\n      \"title\": \"The Lat Schema\",\n      \"default\": 0,\n      \"examples\": [\n        28.45949935913086\n      ]\n    },\n    \"lng\": {\n      \"$id\": \"/properties/lng\",\n      \"type\": \"number\",\n      \"title\": \"The Lng Schema\",\n      \"default\": 0,\n      \"examples\": [\n        77.02665710449219\n      ]\n    },\n    \"hours\": {\n      \"$id\": \"/properties/hours\",\n      \"type\": \"string\",\n      \"title\": \"The Hours Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n      ]\n    },\n    \"updatedAt\": {\n      \"$id\": \"/properties/updatedAt\",\n      \"type\": \"string\",\n      \"title\": \"The Updatedat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 201;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//dynamically saving the new product id generated in NewProductId Environment variable\npostman.setEnvironmentVariable(\"NewStoreId\", jsonData.id);\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for new store\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id==8929;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"TestingStore\";\ntests[\"Value of type variable should be \"+jsonData.type] = jsonData.type===\"Testing\";\ntests[\"Value of address variable should be \"+jsonData.address] = jsonData.address===\"India\";\ntests[\"Value of city variable should be \"+jsonData.city] = jsonData.city===\"GGN\";\ntests[\"Value of state variable should be \"+jsonData.state] = jsonData.state===\"HAR\";\ntests[\"Value of zip variable should be \"+jsonData.zip] = jsonData.zip===\"122001\";\ntests[\"Value of latitude variable should be \"+jsonData.lat] = jsonData.lat===28.4595;\ntests[\"Value of longitude variable should be \"+jsonData.lng] = jsonData.lng=== 77.02666;\ntests[\"Value of hours variable should be \"+jsonData.hours] = jsonData.hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573449377,
			"name": "Create a new store",
			"description": "Creates a new store\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"TestingStore\",\r\n  \"type\": \"Testing\",\r\n  \"address\": \"India\",\r\n  \"address2\": \"\",\r\n  \"city\": \"GGN\",\r\n  \"state\": \"HAR\",\r\n  \"zip\": \"122001\",\r\n  \"lat\": 28.4595,\r\n  \"lng\": 77.02666,\r\n  \"hours\": \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\",\r\n  \"services\": {}\r\n}\r\n"
		},
		{
			"id": "6805922a-e0e9-749b-9654-ea5906aa18ea",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/stores/{{NewStoreId}}",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        8921\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"TestingStore\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Testing\"\n      ]\n    },\n    \"address\": {\n      \"$id\": \"/properties/address\",\n      \"type\": \"string\",\n      \"title\": \"The Address Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"India\"\n      ]\n    },\n    \"address2\": {\n      \"$id\": \"/properties/address2\",\n      \"type\": \"string\",\n      \"title\": \"The Address2 Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"\"\n      ]\n    },\n    \"city\": {\n      \"$id\": \"/properties/city\",\n      \"type\": \"string\",\n      \"title\": \"The City Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"GGN\"\n      ]\n    },\n    \"state\": {\n      \"$id\": \"/properties/state\",\n      \"type\": \"string\",\n      \"title\": \"The State Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"HAR\"\n      ]\n    },\n    \"zip\": {\n      \"$id\": \"/properties/zip\",\n      \"type\": \"string\",\n      \"title\": \"The Zip Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"122001\"\n      ]\n    },\n    \"lat\": {\n      \"$id\": \"/properties/lat\",\n      \"type\": \"number\",\n      \"title\": \"The Lat Schema\",\n      \"default\": 0,\n      \"examples\": [\n        28.45949935913086\n      ]\n    },\n    \"lng\": {\n      \"$id\": \"/properties/lng\",\n      \"type\": \"number\",\n      \"title\": \"The Lng Schema\",\n      \"default\": 0,\n      \"examples\": [\n        77.02665710449219\n      ]\n    },\n    \"hours\": {\n      \"$id\": \"/properties/hours\",\n      \"type\": \"string\",\n      \"title\": \"The Hours Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n      ]\n    },\n    \"updatedAt\": {\n      \"$id\": \"/properties/updatedAt\",\n      \"type\": \"string\",\n      \"title\": \"The Updatedat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for new store\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id==8929;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"TestingStore\";\ntests[\"Value of type variable should be \"+jsonData.type] = jsonData.type===\"Testing\";\ntests[\"Value of address variable should be \"+jsonData.address] = jsonData.address===\"India\";\ntests[\"Value of city variable should be \"+jsonData.city] = jsonData.city===\"GGN\";\ntests[\"Value of state variable should be \"+jsonData.state] = jsonData.state===\"HAR\";\ntests[\"Value of zip variable should be \"+jsonData.zip] = jsonData.zip===\"122001\";\ntests[\"Value of latitude variable should be \"+jsonData.lat] = jsonData.lat===28.4595;\ntests[\"Value of longitude variable should be \"+jsonData.lng] = jsonData.lng=== 77.02666;\ntests[\"Value of hours variable should be \"+jsonData.hours] = jsonData.hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573452295,
			"name": "Get a store based on store ID",
			"description": "Returns a store based on store ID\r\n\r\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "6ab7cb8d-3a3a-fe92-0252-d88a2c713247",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/products",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Electric Car\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Car\"\n      ]\n    },\n    \"price\": {\n      \"$id\": \"/properties/price\",\n      \"type\": \"integer\",\n      \"title\": \"The Price Schema\",\n      \"default\": 0,\n      \"examples\": [\n        898888\n      ]\n    },\n    \"shipping\": {\n      \"$id\": \"/properties/shipping\",\n      \"type\": \"integer\",\n      \"title\": \"The Shipping Schema\",\n      \"default\": 0,\n      \"examples\": [\n        10000000\n      ]\n    },\n    \"upc\": {\n      \"$id\": \"/properties/upc\",\n      \"type\": \"string\",\n      \"title\": \"The Upc Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"12341234\"\n      ]\n    },\n    \"description\": {\n      \"$id\": \"/properties/description\",\n      \"type\": \"string\",\n      \"title\": \"The Description Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Electric car as future car\"\n      ]\n    },\n    \"manufacturer\": {\n      \"$id\": \"/properties/manufacturer\",\n      \"type\": \"string\",\n      \"title\": \"The Manufacturer Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Tesla\"\n      ]\n    },\n    \"model\": {\n      \"$id\": \"/properties/model\",\n      \"type\": \"string\",\n      \"title\": \"The Model Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"ELECTRAZXI\"\n      ]\n    }\n  }\n}\n;\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 201;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//dynamically saving the new product id generated in NewProductId Environment variable\npostman.setEnvironmentVariable(\"NewProductId\", jsonData.id);\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"id is present\"] = responseBody.has(\"id\");\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"type is present\"] = responseBody.has(\"type\");\ntests[\"price is present\"] = responseBody.has(\"price\");\ntests[\"shipping is present\"] = responseBody.has(\"shipping\");\ntests[\"upc is present\"] = responseBody.has(\"upc\");\ntests[\"description is present\"] = responseBody.has(\"description\");\ntests[\"manufacturer is present\"] = responseBody.has(\"manufacturer\");\ntests[\"model is present\"] = responseBody.has(\"model\");\ntests[\"createdAt is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt is present\"] = responseBody.has(\"updatedAt\");\n\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"Electric Car\";\ntests[\"value of type variable should be \"+jsonData.type] = jsonData.type===\"Car\";\ntests[\"value of price variable should be \"+jsonData.price] = jsonData.price===898888;\ntests[\"value of shipping variable should be \"+jsonData.shipping] = jsonData.shipping===10000000;\ntests[\"value of upc variable should be \"+jsonData.upc] = jsonData.upc===\"12341234\";\ntests[\"value of description variable should be \"+jsonData.description] = jsonData.description===\"Electric car as future car\";\ntests[\"value of manufacturer variable should be \"+jsonData.manufacturer] = jsonData.manufacturer===\"Tesla\";\ntests[\"value of model variable should be \"+jsonData.model] = jsonData.model===\"ELECTRAZXI\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573485181,
			"name": "Create a new product",
			"description": "Creates a new Product\t",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"Electric Car\",\r\n  \"type\": \"Car\",\r\n  \"price\": 898888,\r\n  \"shipping\": 10000000,\r\n  \"upc\": \"12341234\",\r\n  \"description\": \"Electric car as future car\",\r\n  \"manufacturer\": \"Tesla\",\r\n  \"model\": \"ELECTRAZXI\"\r\n}"
		},
		{
			"id": "70d7d8fc-a811-ab2c-05df-4d9ab977f885",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/categories/Test02",
			"folder": "d7b03691-76f6-6c70-6879-95f0cae37052",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//Status code: Code is 404\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 404;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema ={\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"id\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n \n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//dynamically saving the new category id generated in NewCategoryId Environment variable\npostman.setEnvironmentVariable(\"NewCategoryId\", jsonData.id);\n\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with message variable\"] = responseBody.has(\"message\");\ntests[\"data array is present with code variable\"] = responseBody.has(\"code\");\ntests[\"data array is present with className variable\"] = responseBody.has(\"className\");\ntests[\"data array is present with errors variable\"] = responseBody.has(\"errors\");\n\n//verify json values for category deleted\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"NotFound\";\ntests[\"Value of message variable should be \"+jsonData.message] = jsonData.message===\"No record found for id 'Test02'\";\ntests[\"Value of code variable should be \"+jsonData.code] = jsonData.code===404;\ntests[\"Value of className variable should be \"+jsonData.className] = jsonData.className===\"not-found\";\n\n\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573426259,
			"name": "Try deleting the deleted category-To verify that category created has been deleted",
			"description": "Try deleting the deleted category-To verify that category created has been deleted",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "76621c65-8f25-9e41-2e55-ad8d9e63cb71",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/categories",
			"folder": "d7b03691-76f6-6c70-6879-95f0cae37052",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//Status code: Code is 201\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 201;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema ={\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"id\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n \n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//dynamically saving the new category id generated in NewCategoryId Environment variable\npostman.setEnvironmentVariable(\"NewCategoryId\", jsonData.id);\n\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first category\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Category02\";\ntests[\"Value of name variable should be \"+jsonData.id] = jsonData.id===\"Test02\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573415485,
			"name": "Create a new category",
			"description": "Create a new category",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n  \"name\": \"Test Category02\",\r\n  \"id\": \"Test02\"\r\n}"
		},
		{
			"id": "87928d22-6b28-59d1-b84d-6b95ad34ca8d",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/services/{{NewServiceId}}",
			"folder": "def6c25a-e326-20b9-729a-6ea608252a58",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Services\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573394134,
			"name": "Get a single service using service id",
			"description": "Get a single service using service id",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "8d82e414-9122-2cfe-7e93-c08434831edf",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/stores/4",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        8921\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"TestingStore\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Testing\"\n      ]\n    },\n    \"address\": {\n      \"$id\": \"/properties/address\",\n      \"type\": \"string\",\n      \"title\": \"The Address Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"India\"\n      ]\n    },\n    \"address2\": {\n      \"$id\": \"/properties/address2\",\n      \"type\": \"string\",\n      \"title\": \"The Address2 Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"\"\n      ]\n    },\n    \"city\": {\n      \"$id\": \"/properties/city\",\n      \"type\": \"string\",\n      \"title\": \"The City Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"GGN\"\n      ]\n    },\n    \"state\": {\n      \"$id\": \"/properties/state\",\n      \"type\": \"string\",\n      \"title\": \"The State Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"HAR\"\n      ]\n    },\n    \"zip\": {\n      \"$id\": \"/properties/zip\",\n      \"type\": \"string\",\n      \"title\": \"The Zip Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"122001\"\n      ]\n    },\n    \"lat\": {\n      \"$id\": \"/properties/lat\",\n      \"type\": \"number\",\n      \"title\": \"The Lat Schema\",\n      \"default\": 0,\n      \"examples\": [\n        28.45949935913086\n      ]\n    },\n    \"lng\": {\n      \"$id\": \"/properties/lng\",\n      \"type\": \"number\",\n      \"title\": \"The Lng Schema\",\n      \"default\": 0,\n      \"examples\": [\n        77.02665710449219\n      ]\n    },\n    \"hours\": {\n      \"$id\": \"/properties/hours\",\n      \"type\": \"string\",\n      \"title\": \"The Hours Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n      ]\n    },\n    \"updatedAt\": {\n      \"$id\": \"/properties/updatedAt\",\n      \"type\": \"string\",\n      \"title\": \"The Updatedat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for new store\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id==4;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Minnetonka\";\ntests[\"Value of type variable should be \"+jsonData.type] = jsonData.type===\"Testing\";\ntests[\"Value of address variable should be \"+jsonData.address] = jsonData.address===\"13513 Ridgedale Dr\";\ntests[\"Value of city variable should be \"+jsonData.city] = jsonData.city===\"Hopkins\";\ntests[\"Value of state variable should be \"+jsonData.state] = jsonData.state===\"MN\";\ntests[\"Value of zip variable should be \"+jsonData.zip] = jsonData.zip===\"55305\";\ntests[\"Value of latitude variable should be \"+jsonData.lat] = jsonData.lat===44.969658;\ntests[\"Value of longitude variable should be \"+jsonData.lng] = jsonData.lng=== -93.449539;\ntests[\"Value of hours variable should be \"+jsonData.hours] = jsonData.hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573463623,
			"name": "Update the store with id 4 with original type",
			"description": "Update the store with id 4 with original type",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n\r\n  \"type\": \"Testing\"\r\n\r\n}"
		},
		{
			"id": "96c3bd0d-9d9f-3600-20d4-45b1732f7397",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/products/9999681",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"type\": {\n      \"type\": \"string\",\n      },\n    \"price\": {\n      \"type\": \"integer\",\n      },\n    \"upc\": {\n      \"type\": \"string\",\n      },\n    \"shipping\": {\n      \"type\": \"integer\",\n      },\n    \"description\": {\n      \"type\": \"string\",\n      },\n    \"manufacturer\": {\n      \"type\": \"string\",\n      },\n    \"model\": {\n      \"type\": \"string\",\n      },\n    \"url\": {\n      \"type\": \"null\",\n      },\n    \"image\": {\n      \"type\": \"null\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Patch the new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"id is present\"] = responseBody.has(\"id\");\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"type is present\"] = responseBody.has(\"type\");\ntests[\"price is present\"] = responseBody.has(\"price\");\ntests[\"shipping is present\"] = responseBody.has(\"shipping\");\ntests[\"upc is present\"] = responseBody.has(\"upc\");\ntests[\"description is present\"] = responseBody.has(\"description\");\ntests[\"manufacturer is present\"] = responseBody.has(\"manufacturer\");\ntests[\"model is present\"] = responseBody.has(\"model\");\ntests[\"createdAt is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt is present\"] = responseBody.has(\"updatedAt\");\ntests[\"url is present\"] = responseBody.has(\"url\");\ntests[\"image is present\"] = responseBody.has(\"image\");\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of id variable should be \"+jsonData.id] = jsonData.id===9999681;\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"Electric Car\";\ntests[\"value of type variable should be \"+jsonData.type] = jsonData.type===\"Automatic Car\";\ntests[\"value of price variable should be \"+jsonData.price] = jsonData.price===898888;\ntests[\"value of shipping variable should be \"+jsonData.shipping] = jsonData.shipping===10000000;\ntests[\"value of upc variable should be \"+jsonData.upc] = jsonData.upc===\"12341234\";\ntests[\"value of description variable should be \"+jsonData.description] = jsonData.description===\"Electric car as future car\";\ntests[\"value of manufacturer variable should be \"+jsonData.manufacturer] = jsonData.manufacturer===\"Tesla\";\ntests[\"value of model variable should be \"+jsonData.model] = jsonData.model===\"ELECTRAZXI\";\ntests[\"value of url variable should be \"+jsonData.url] = jsonData.url===null;\ntests[\"value of image variable should be \"+jsonData.image] = jsonData.image===null;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573497835,
			"name": "Update the product's one variables using the product id ",
			"description": "Update the product's one variables using the product id ",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n  \"type\": \"Automatic Car\"\r\n\r\n}"
		},
		{
			"id": "9c449940-204b-3628-cdb1-9b5115c201cb",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/categories",
			"folder": "d7b03691-76f6-6c70-6879-95f0cae37052",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"total\": {\n      \"type\": \"integer\",\n      },\n    \"limit\": {\n      \"type\": \"integer\",\n      },\n    \"skip\": {\n      \"type\": \"integer\",\n      \"title\": \"The Skip Schema\",\n      },\n    \"data\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            },\n          \"name\": {\n            \"type\": \"string\",\n            },\n          \"createdAt\": {\n            \"type\": \"string\",\n            },\n          \"updatedAt\": {\n            \"type\": \"string\",\n            },\n          \"subCategories\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"string\",\n                  },\n                \"name\": {\n                  \"type\": \"string\",\n                  },\n                \"createdAt\": {\n                  \"type\": \"string\",\n                  },\n                \"updatedAt\": {\n                  \"type\": \"string\",\n                  }\n              }\n            }\n          },\n          \"categoryPath\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"type\": \"string\",\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  },\n                \"createdAt\": {\n                  \"type\": \"string\",\n                  },\n                \"updatedAt\": {\n                  \"type\": \"string\",\n                  }\n              }\n            }\n          }\n        }\n      }\n    }\n  \n};\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n\n\n//Verify that below mentioned variables are present\ntests[\"total variable is present\"] = responseBody.has(\"total\");\ntests[\"limit variable is present\"] = responseBody.has(\"limit\");\ntests[\"skip variable is present\"] = responseBody.has(\"skip\");\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\ntests[\"data array is present with subCategories variable\"] = responseBody.has(\"subCategories\");\ntests[\"data array is present with categoryPath variable\"] = responseBody.has(\"categoryPath\");\n\n\n//Validate json value for variable \"total\", \"limit\", \"skip\"\nvar jsonData = JSON.parse(responseBody);\ntests[\"total products variable value should be \"+jsonData.total] = jsonData.total==\"4307\";\ntests[\"limit variable value should be \"+jsonData.limit] = jsonData.limit===10;\ntests[\"skip variable value should be \"+jsonData.skip] = jsonData.skip===0;\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.data[0].id] = jsonData.data[0].id===\"abcat0010000\";\ntests[\"Value of name variable should be \"+jsonData.data[0].name] = jsonData.data[0].name===\"Gift Ideas\";\ntests[\"Value of createdAt variable should be \"+jsonData.data[0].createdAt] = jsonData.data[0].createdAt=== \"2016-11-17T17:57:04.285Z\";\ntests[\"Value of updatedAt variable should be \"+jsonData.data[0].updatedAt] = jsonData.data[0].updatedAt==\"2016-11-17T17:57:04.285Z\";\n\n//Verify Subcategories\ntests[\"Value of id variable at subCategories level should be \"+jsonData.data[0].subCategories[0].id] = jsonData.data[0].subCategories[0].id==\"abcat0020004\";\ntests[\"Value of name variable at subCategories level should be \"+jsonData.data[0].subCategories[0].name] = jsonData.data[0].subCategories[0].name==\"Unique Gifts\";\ntests[\"Value of createdAt variable at subCategories level should be \"+jsonData.data[0].subCategories[0].createdAt] = jsonData.data[0].subCategories[0].createdAt==\"2016-11-17T17:57:04.285Z\";\ntests[\"Value of updatedAt variable at subCategories level should be \"+jsonData.data[0].subCategories[0].updatedAt] = jsonData.data[0].subCategories[0].updatedAt==\"2016-11-17T17:57:04.285Z\";\n\n//Verify CategoryPath\ntests[\"Value of id variable at CategoryPath level should be \"+jsonData.data[0].subCategories[0].id] = jsonData.data[0].subCategories[0].id==\"abcat0020004\";\ntests[\"Value of name variable at CategoryPath level should be \"+jsonData.data[0].subCategories[0].name] = jsonData.data[0].subCategories[0].name==\"Unique Gifts\";\ntests[\"Value of createdAt variable at CategoryPath level should be \"+jsonData.data[0].subCategories[0].createdAt] = jsonData.data[0].subCategories[0].createdAt==\"2016-11-17T17:57:04.285Z\";\ntests[\"Value of updatedAt variable at CategoryPath level should be \"+jsonData.data[0].subCategories[0].updatedAt] = jsonData.data[0].subCategories[0].updatedAt==\"2016-11-17T17:57:04.285Z\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573411666,
			"name": "Get all categories",
			"description": "Returns all categories that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all categories.\r\n\r\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "9df50134-a679-9467-38c7-4c11752dcbc8",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/products/9999681",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"type\": {\n      \"type\": \"string\",\n      },\n    \"price\": {\n      \"type\": \"integer\",\n      },\n    \"upc\": {\n      \"type\": \"string\",\n      },\n    \"shipping\": {\n      \"type\": \"integer\",\n      },\n    \"description\": {\n      \"type\": \"string\",\n      },\n    \"manufacturer\": {\n      \"type\": \"string\",\n      },\n    \"model\": {\n      \"type\": \"string\",\n      },\n    \"url\": {\n      \"type\": \"null\",\n      },\n    \"image\": {\n      \"type\": \"null\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Patch the new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"id is present\"] = responseBody.has(\"id\");\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"type is present\"] = responseBody.has(\"type\");\ntests[\"price is present\"] = responseBody.has(\"price\");\ntests[\"shipping is present\"] = responseBody.has(\"shipping\");\ntests[\"upc is present\"] = responseBody.has(\"upc\");\ntests[\"description is present\"] = responseBody.has(\"description\");\ntests[\"manufacturer is present\"] = responseBody.has(\"manufacturer\");\ntests[\"model is present\"] = responseBody.has(\"model\");\ntests[\"createdAt is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt is present\"] = responseBody.has(\"updatedAt\");\ntests[\"url is present\"] = responseBody.has(\"url\");\ntests[\"image is present\"] = responseBody.has(\"image\");\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of id variable should be \"+jsonData.id] = jsonData.id===9999681;\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"A Car\";\ntests[\"value of type variable should be \"+jsonData.type] = jsonData.type===\"Automatic Car\";\ntests[\"value of price variable should be \"+jsonData.price] = jsonData.price===898888;\ntests[\"value of shipping variable should be \"+jsonData.shipping] = jsonData.shipping===10000000;\ntests[\"value of upc variable should be \"+jsonData.upc] = jsonData.upc===\"12341234\";\ntests[\"value of description variable should be \"+jsonData.description] = jsonData.description===\"Electric car as future car\";\ntests[\"value of manufacturer variable should be \"+jsonData.manufacturer] = jsonData.manufacturer===\"Tesla\";\ntests[\"value of model variable should be \"+jsonData.model] = jsonData.model===\"ELECTRAZXI\";\ntests[\"value of url variable should be \"+jsonData.url] = jsonData.url===null;\ntests[\"value of image variable should be \"+jsonData.image] = jsonData.image===null;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573504752,
			"name": "Update the product's two variables using the product id ",
			"description": "Update the product's two variables using the product id ",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n\"name\": \"A Car\",\r\n\"type\": \"Automatic Car\"\r\n\r\n}"
		},
		{
			"id": "bd198a23-ab7d-fc1c-0b46-1abd178ae865",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/products/9999681",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"type\": {\n      \"type\": \"string\",\n      },\n    \"price\": {\n      \"type\": \"integer\",\n      },\n    \"upc\": {\n      \"type\": \"string\",\n      },\n    \"shipping\": {\n      \"type\": \"integer\",\n      },\n    \"description\": {\n      \"type\": \"string\",\n      },\n    \"manufacturer\": {\n      \"type\": \"string\",\n      },\n    \"model\": {\n      \"type\": \"string\",\n      },\n    \"url\": {\n      \"type\": \"null\",\n      },\n    \"image\": {\n      \"type\": \"null\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Patch the new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"id is present\"] = responseBody.has(\"id\");\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"type is present\"] = responseBody.has(\"type\");\ntests[\"price is present\"] = responseBody.has(\"price\");\ntests[\"shipping is present\"] = responseBody.has(\"shipping\");\ntests[\"upc is present\"] = responseBody.has(\"upc\");\ntests[\"description is present\"] = responseBody.has(\"description\");\ntests[\"manufacturer is present\"] = responseBody.has(\"manufacturer\");\ntests[\"model is present\"] = responseBody.has(\"model\");\ntests[\"createdAt is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt is present\"] = responseBody.has(\"updatedAt\");\ntests[\"url is present\"] = responseBody.has(\"url\");\ntests[\"image is present\"] = responseBody.has(\"image\");\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of id variable should be \"+jsonData.id] = jsonData.id===9999681;\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"Electric Car\";\ntests[\"value of type variable should be \"+jsonData.type] = jsonData.type===\"Car\";\ntests[\"value of price variable should be \"+jsonData.price] = jsonData.price===898888;\ntests[\"value of shipping variable should be \"+jsonData.shipping] = jsonData.shipping===10000000;\ntests[\"value of upc variable should be \"+jsonData.upc] = jsonData.upc===\"12341234\";\ntests[\"value of description variable should be \"+jsonData.description] = jsonData.description===\"Electric car as future car\";\ntests[\"value of manufacturer variable should be \"+jsonData.manufacturer] = jsonData.manufacturer===\"Tesla\";\ntests[\"value of model variable should be \"+jsonData.model] = jsonData.model===\"ELECTRAZXI\";\ntests[\"value of url variable should be \"+jsonData.url] = jsonData.url===null;\ntests[\"value of image variable should be \"+jsonData.image] = jsonData.image===null;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573507544,
			"name": "Update the product with id 9999681 with original value of two variables",
			"description": "Update the product with id 9999681 with original value of two variables",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n\"name\": \"Electric Car\",\r\n\"type\": \"Car\"\r\n\r\n}"
		},
		{
			"id": "bf6b220d-175e-bcaf-1434-d54cdff96979",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/stores",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"total\": {\n      \"type\": \"integer\",\n      },\n    \"limit\": {\n      \"type\": \"integer\",\n      },\n    \"skip\": {\n      \"type\": \"integer\",\n      },\n    \"data\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"title\": \"The Id Schema\",\n            \"default\": 0\n          },\n          \"name\": {\n            \"type\": \"string\",\n            },\n          \"type\": {\n            \"type\": \"string\",\n            },\n          \"address\": {\n            \"type\": \"string\",\n            },\n          \"address2\": {\n            \"type\": \"string\",\n            },\n          \"city\": {\n            \"type\": \"string\",\n            },\n          \"state\": {\n            \"type\": \"string\",\n            },\n          \"zip\": {\n            \"type\": \"string\",\n            },\n          \"lat\": {\n            \"type\": \"number\",\n            },\n          \"lng\": {\n            \"type\": \"number\",\n            },\n          \"hours\": {\n            \"type\": \"string\",\n            },\n          \"createdAt\": {\n            \"type\": \"string\",\n            },\n          \"updatedAt\": {\n            \"type\": \"string\",\n            },\n          \"services\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"type\": \"integer\",\n                  },\n                \"name\": {\n                  \"type\": \"string\",\n                  },\n                \"createdAt\": {\n                  \"type\": \"string\",\n                  },\n                \"updatedAt\": {\n                  \"type\": \"string\",\n                  },\n                \"storeservices\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"createdAt\": {\n                      \"type\": \"string\",\n                      },\n                    \"updatedAt\": {\n                      \"type\": \"string\",\n                      },\n                    \"storeId\": {\n                      \"type\": \"integer\",\n                      },\n                    \"serviceId\": {\n                      \"type\": \"integer\",\n                      }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n\n\n//Verify that below mentioned variables are present\ntests[\"total variable is present\"] = responseBody.has(\"total\");\ntests[\"limit variable is present\"] = responseBody.has(\"limit\");\ntests[\"skip variable is present\"] = responseBody.has(\"skip\");\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\ntests[\"services array has present\"] = responseBody.has(\"services\");\ntests[\"services array has storeId\"] = responseBody.has(\"storeId\");\ntests[\"services array has serviceId\"] = responseBody.has(\"serviceId\");\n\n\n//Validate json value for variable \"total\", \"limit\", \"skip\"\nvar jsonData = JSON.parse(responseBody);\ntests[\"total products variable value should be \"+jsonData.total] = jsonData.total===1568;\ntests[\"limit variable value should be \"+jsonData.limit] = jsonData.limit===10;\ntests[\"skip variable value should be \"+jsonData.skip] = jsonData.skip===0;\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.data[0].id] = jsonData.data[0].id==4;\ntests[\"Value of name variable should be \"+jsonData.data[0].name] = jsonData.data[0].name===\"Minnetonka\";\ntests[\"Value of type variable should be \"+jsonData.data[0].type] = jsonData.data[0].type===\"Testing\";\ntests[\"Value of address variable should be \"+jsonData.data[0].address] = jsonData.data[0].address===\"13513 Ridgedale Dr\";\ntests[\"Value of city variable should be \"+jsonData.data[0].city] = jsonData.data[0].city===\"Hopkins\";\ntests[\"Value of state variable should be \"+jsonData.data[0].state] = jsonData.data[0].state===\"MN\";\ntests[\"Value of zip variable should be \"+jsonData.data[0].zip] = jsonData.data[0].zip===\"55305\";\ntests[\"Value of latitude variable should be \"+jsonData.data[0].lat] = jsonData.data[0].lat===44.969658;\ntests[\"Value of longitude variable should be \"+jsonData.data[0].lng] = jsonData.data[0].lng=== -93.449539;\ntests[\"Value of hours variable should be \"+jsonData.data[0].hours] = jsonData.data[0].hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";\ntests[\"Value of id variable in services array should be \"+jsonData.data[0].services[0].id] = jsonData.data[0].services[0].id=== 1;\ntests[\"Value of name variable in services array should be \"+jsonData.data[0].services[0].name] = jsonData.data[0].services[0].name===\"Testing\";\ntests[\"Value of createdAt variable in services array should be \"+jsonData.data[0].services[0].createdAt] = jsonData.data[0].services[0].createdAt===\"2016-11-17T17:56:35.881Z\";\ntests[\"Value of updatedAt variable in services array should be \"+jsonData.data[0].services[0].updatedAt] = jsonData.data[0].services[0].updatedAt===\"2018-02-25T15:53:00.280Z\";\ntests[\"Value of createdAt variable in services array should be \"+jsonData.data[0].services[0].storeservices.createdAt] = jsonData.data[0].services[0].storeservices.createdAt===\"2016-11-17T17:57:09.213Z\";\ntests[\"Value of updatedAt variable in services array should be \"+jsonData.data[0].services[0].storeservices.updatedAt] = jsonData.data[0].services[0].storeservices.updatedAt===\"2016-11-17T17:57:09.213Z\";\ntests[\"Value of storeId variable in services array should be \"+jsonData.data[0].services[0].storeservices.storeId] = jsonData.data[0].services[0].storeservices.storeId===4;\ntests[\"Value of serviceId variable in services array should be \"+jsonData.data[0].services[0].storeservices.serviceId] = jsonData.data[0].services[0].storeservices.serviceId===1;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519574251984,
			"name": "Get all stores",
			"description": "Returns all stores that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all stores.\r\n\r\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "c163744b-a8f8-bce2-2082-232b8718d5ed",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/stores/4",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        8921\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"TestingStore\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Testing\"\n      ]\n    },\n    \"address\": {\n      \"$id\": \"/properties/address\",\n      \"type\": \"string\",\n      \"title\": \"The Address Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"India\"\n      ]\n    },\n    \"address2\": {\n      \"$id\": \"/properties/address2\",\n      \"type\": \"string\",\n      \"title\": \"The Address2 Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"\"\n      ]\n    },\n    \"city\": {\n      \"$id\": \"/properties/city\",\n      \"type\": \"string\",\n      \"title\": \"The City Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"GGN\"\n      ]\n    },\n    \"state\": {\n      \"$id\": \"/properties/state\",\n      \"type\": \"string\",\n      \"title\": \"The State Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"HAR\"\n      ]\n    },\n    \"zip\": {\n      \"$id\": \"/properties/zip\",\n      \"type\": \"string\",\n      \"title\": \"The Zip Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"122001\"\n      ]\n    },\n    \"lat\": {\n      \"$id\": \"/properties/lat\",\n      \"type\": \"number\",\n      \"title\": \"The Lat Schema\",\n      \"default\": 0,\n      \"examples\": [\n        28.45949935913086\n      ]\n    },\n    \"lng\": {\n      \"$id\": \"/properties/lng\",\n      \"type\": \"number\",\n      \"title\": \"The Lng Schema\",\n      \"default\": 0,\n      \"examples\": [\n        77.02665710449219\n      ]\n    },\n    \"hours\": {\n      \"$id\": \"/properties/hours\",\n      \"type\": \"string\",\n      \"title\": \"The Hours Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n      ]\n    },\n    \"updatedAt\": {\n      \"$id\": \"/properties/updatedAt\",\n      \"type\": \"string\",\n      \"title\": \"The Updatedat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for new store\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id==4;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Minnetonka\";\ntests[\"Value of type variable should be \"+jsonData.type] = jsonData.type===\"Testing PATCH\";\ntests[\"Value of address variable should be \"+jsonData.address] = jsonData.address===\"13513 Ridgedale Dr\";\ntests[\"Value of city variable should be \"+jsonData.city] = jsonData.city===\"Hopkins\";\ntests[\"Value of state variable should be \"+jsonData.state] = jsonData.state===\"MN\";\ntests[\"Value of zip variable should be \"+jsonData.zip] = jsonData.zip===\"55305\";\ntests[\"Value of latitude variable should be \"+jsonData.lat] = jsonData.lat===44.969658;\ntests[\"Value of longitude variable should be \"+jsonData.lng] = jsonData.lng=== -93.449539;\ntests[\"Value of hours variable should be \"+jsonData.hours] = jsonData.hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573460584,
			"name": "Update the store's one variables using the store id ",
			"description": "Update the store's one variables using the store id ",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n  \"type\": \"Testing PATCH\"\r\n\r\n}"
		},
		{
			"id": "c27204d2-429b-191e-e494-72baee20c2c7",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/services",
			"folder": "def6c25a-e326-20b9-729a-6ea608252a58",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 201;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//dynamically saving the new service id generated in NewServiceId Environment variable\npostman.setEnvironmentVariable(\"NewServiceId\", jsonData.id);\n\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first service in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Services\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573390984,
			"name": "Creates a new service",
			"description": "Creates a new service\r\n\r\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\n\"name\": \"Test Services\"\n}"
		},
		{
			"id": "c7efbcb9-cafa-efcf-3159-c25d8d243cf2",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/products",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"total\": {\n      \"$id\": \"/properties/total\",\n      \"type\": \"integer\",\n      \"title\": \"The Total Schema\",\n      \"default\": 0,\n      \"examples\": [\n        51986\n      ]\n    },\n    \"limit\": {\n      \"$id\": \"/properties/limit\",\n      \"type\": \"integer\",\n      \"title\": \"The Limit Schema\",\n      \"default\": 0,\n      \"examples\": [\n        10\n      ]\n    },\n    \"skip\": {\n      \"$id\": \"/properties/skip\",\n      \"type\": \"integer\",\n      \"title\": \"The Skip Schema\",\n      \"default\": 0,\n      \"examples\": [\n        0\n      ]\n    },\n    \"data\": {\n      \"$id\": \"/properties/data\",\n      \"type\": \"array\",\n      \"items\": {\n        \"$id\": \"/properties/data/items\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$id\": \"/properties/data/items/properties/id\",\n            \"type\": \"integer\",\n            \"title\": \"The Id Schema\",\n            \"default\": 0,\n            \"examples\": [\n              43900\n            ]\n          },\n          \"name\": {\n            \"$id\": \"/properties/data/items/properties/name\",\n            \"type\": \"string\",\n            \"title\": \"The Name Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"Duracell - AAA Batteries (4-Pack)\"\n            ]\n          },\n          \"type\": {\n            \"$id\": \"/properties/data/items/properties/type\",\n            \"type\": \"string\",\n            \"title\": \"The Type Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"HardGood\"\n            ]\n          },\n          \"price\": {\n            \"$id\": \"/properties/data/items/properties/price\",\n            \"type\": \"number\",\n            \"title\": \"The Price Schema\",\n            \"default\": 0,\n            \"examples\": [\n              5.489999771118164\n            ]\n          },\n          \"upc\": {\n            \"$id\": \"/properties/data/items/properties/upc\",\n            \"type\": \"string\",\n            \"title\": \"The Upc Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"041333424019\"\n            ]\n          },\n          \"shipping\": {\n            \"$id\": \"/properties/data/items/properties/shipping\",\n            \"type\": \"integer\",\n            \"title\": \"The Shipping Schema\",\n            \"default\": 0,\n            \"examples\": [\n              0\n            ]\n          },\n          \"description\": {\n            \"$id\": \"/properties/data/items/properties/description\",\n            \"type\": \"string\",\n            \"title\": \"The Description Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"Compatible with select electronic devices; AAA size; DURALOCK Power Preserve technology; 4-pack\"\n            ]\n          },\n          \"manufacturer\": {\n            \"$id\": \"/properties/data/items/properties/manufacturer\",\n            \"type\": \"string\",\n            \"title\": \"The Manufacturer Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"Duracell\"\n            ]\n          },\n          \"model\": {\n            \"$id\": \"/properties/data/items/properties/model\",\n            \"type\": \"string\",\n            \"title\": \"The Model Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"MN2400B4Z\"\n            ]\n          },\n          \"url\": {\n            \"$id\": \"/properties/data/items/properties/url\",\n            \"type\": \"string\",\n            \"title\": \"The Url Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"http://www.bestbuy.com/site/duracell-aaa-batteries-4-pack/43900.p?id=1051384074145&skuId=43900&cmp=RMXCC\"\n            ]\n          },\n          \"image\": {\n            \"$id\": \"/properties/data/items/properties/image\",\n            \"type\": \"string\",\n            \"title\": \"The Image Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"http://img.bbystatic.com/BestBuy_US/images/products/4390/43900_sa.jpg\"\n            ]\n          },\n          \"createdAt\": {\n            \"$id\": \"/properties/data/items/properties/createdAt\",\n            \"type\": \"string\",\n            \"title\": \"The Createdat Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"2016-11-17T17:58:03.298Z\"\n            ]\n          },\n          \"updatedAt\": {\n            \"$id\": \"/properties/data/items/properties/updatedAt\",\n            \"type\": \"string\",\n            \"title\": \"The Updatedat Schema\",\n            \"default\": \"\",\n            \"examples\": [\n              \"2016-11-17T17:58:03.298Z\"\n            ]\n          },\n          \"categories\": {\n            \"$id\": \"/properties/data/items/properties/categories\",\n            \"type\": \"array\",\n            \"items\": {\n              \"$id\": \"/properties/data/items/properties/categories/items\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"id\": {\n                  \"$id\": \"/properties/data/items/properties/categories/items/properties/id\",\n                  \"type\": \"string\",\n                  \"title\": \"The Id Schema\",\n                  \"default\": \"\",\n                  \"examples\": [\n                    \"abcat0208002\"\n                  ]\n                },\n                \"name\": {\n                  \"$id\": \"/properties/data/items/properties/categories/items/properties/name\",\n                  \"type\": \"string\",\n                  \"title\": \"The Name Schema\",\n                  \"default\": \"\",\n                  \"examples\": [\n                    \"Alkaline Batteries\"\n                  ]\n                },\n                \"createdAt\": {\n                  \"$id\": \"/properties/data/items/properties/categories/items/properties/createdAt\",\n                  \"type\": \"string\",\n                  \"title\": \"The Createdat Schema\",\n                  \"default\": \"\",\n                  \"examples\": [\n                    \"2016-11-17T17:57:04.285Z\"\n                  ]\n                },\n                \"updatedAt\": {\n                  \"$id\": \"/properties/data/items/properties/categories/items/properties/updatedAt\",\n                  \"type\": \"string\",\n                  \"title\": \"The Updatedat Schema\",\n                  \"default\": \"\",\n                  \"examples\": [\n                    \"2016-11-17T17:57:04.285Z\"\n                  ]\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n\n\n//Verify that below mentioned variables are present\ntests[\"total variable is present\"] = responseBody.has(\"total\");\ntests[\"limit variable is present\"] = responseBody.has(\"limit\");\ntests[\"skip variable is present\"] = responseBody.has(\"skip\");\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with price variable\"] = responseBody.has(\"price\");\ntests[\"data array is present with upc variable\"] = responseBody.has(\"upc\");\ntests[\"data array is present with shipping variable\"] = responseBody.has(\"shipping\");\ntests[\"data array is present with description variable\"] = responseBody.has(\"description\");\ntests[\"data array is present with manufacturer variable\"] = responseBody.has(\"manufacturer\");\ntests[\"data array is present with model variable\"] = responseBody.has(\"model\");\ntests[\"data array is present with url variable\"] = responseBody.has(\"url\");\ntests[\"data array is present with image variable\"] = responseBody.has(\"image\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\ntests[\"data array is present with categories variable\"] = responseBody.has(\"categories\");\n\n\n//Validate json value for variable \"total\", \"limit\", \"skip\"\nvar jsonData = JSON.parse(responseBody);\ntests[\"total products variable value should be \"+jsonData.total] = jsonData.total===51991;\ntests[\"limit variable value should be \"+jsonData.limit] = jsonData.limit===10;\ntests[\"skip variable value should be \"+jsonData.skip] = jsonData.skip===0;\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.data[0].id] = jsonData.data[0].id===43900;\ntests[\"Value of name variable should be \"+jsonData.data[0].name] = jsonData.data[0].name===\"Duracell - AAA Batteries (4-Pack)\";\ntests[\"Value of type variable should be \"+jsonData.data[0].type] = jsonData.data[0].type===\"HardGood\";\ntests[\"Value of price variable should be \"+jsonData.data[0].price] = jsonData.data[0].price===5.49;\ntests[\"Value of upc variable should be \"+jsonData.data[0].upc] = jsonData.data[0].upc===\"041333424019\";\ntests[\"Value of shipping variable should be \"+jsonData.data[0].shipping] = jsonData.data[0].shipping===0;\ntests[\"Value of description variable should be \"+jsonData.data[0].description] = jsonData.data[0].description===\"Compatible with select electronic devices; AAA size; DURALOCK Power Preserve technology; 4-pack\";\ntests[\"Value of manufacturer variable should be \"+jsonData.data[0].manufacturer] = jsonData.data[0].manufacturer===\"Duracell\";\ntests[\"Value of model variable should be \"+jsonData.data[0].model] = jsonData.data[0].model===\"MN2400B4Z\";\ntests[\"Value of url variable should be \"+jsonData.data[0].url] = jsonData.data[0].url===\"http://www.bestbuy.com/site/duracell-aaa-batteries-4-pack/43900.p?id=1051384074145&skuId=43900&cmp=RMXCC\";\ntests[\"Value of image variable should be \"+jsonData.data[0].image] = jsonData.data[0].image===\"http://img.bbystatic.com/BestBuy_US/images/products/4390/43900_sa.jpg\";\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573476168,
			"name": "Get all products",
			"description": "Returns all products that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all products.",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "cd0dbd4f-ab64-74b8-810a-79a034fc064d",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/stores/{{NewStoreId}}",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        8921\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"TestingStore\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Testing\"\n      ]\n    },\n    \"address\": {\n      \"$id\": \"/properties/address\",\n      \"type\": \"string\",\n      \"title\": \"The Address Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"India\"\n      ]\n    },\n    \"address2\": {\n      \"$id\": \"/properties/address2\",\n      \"type\": \"string\",\n      \"title\": \"The Address2 Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"\"\n      ]\n    },\n    \"city\": {\n      \"$id\": \"/properties/city\",\n      \"type\": \"string\",\n      \"title\": \"The City Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"GGN\"\n      ]\n    },\n    \"state\": {\n      \"$id\": \"/properties/state\",\n      \"type\": \"string\",\n      \"title\": \"The State Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"HAR\"\n      ]\n    },\n    \"zip\": {\n      \"$id\": \"/properties/zip\",\n      \"type\": \"string\",\n      \"title\": \"The Zip Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"122001\"\n      ]\n    },\n    \"lat\": {\n      \"$id\": \"/properties/lat\",\n      \"type\": \"number\",\n      \"title\": \"The Lat Schema\",\n      \"default\": 0,\n      \"examples\": [\n        28.45949935913086\n      ]\n    },\n    \"lng\": {\n      \"$id\": \"/properties/lng\",\n      \"type\": \"number\",\n      \"title\": \"The Lng Schema\",\n      \"default\": 0,\n      \"examples\": [\n        77.02665710449219\n      ]\n    },\n    \"hours\": {\n      \"$id\": \"/properties/hours\",\n      \"type\": \"string\",\n      \"title\": \"The Hours Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n      ]\n    },\n    \"updatedAt\": {\n      \"$id\": \"/properties/updatedAt\",\n      \"type\": \"string\",\n      \"title\": \"The Updatedat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for new store\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id==8929;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"TestingStore\";\ntests[\"Value of type variable should be \"+jsonData.type] = jsonData.type===\"Testing\";\ntests[\"Value of address variable should be \"+jsonData.address] = jsonData.address===\"India\";\ntests[\"Value of city variable should be \"+jsonData.city] = jsonData.city===\"GGN\";\ntests[\"Value of state variable should be \"+jsonData.state] = jsonData.state===\"HAR\";\ntests[\"Value of zip variable should be \"+jsonData.zip] = jsonData.zip===\"122001\";\ntests[\"Value of latitude variable should be \"+jsonData.lat] = jsonData.lat===28.4595;\ntests[\"Value of longitude variable should be \"+jsonData.lng] = jsonData.lng=== 77.02666;\ntests[\"Value of hours variable should be \"+jsonData.hours] = jsonData.hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573455192,
			"name": "Delete a store which was created above by POST Request",
			"description": "Deletes a single store based on the storeID supplied",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "d35bfdb5-9e8f-d24a-8d30-81e2663d612d",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/version",
			"folder": "4bbb0c40-3c43-6758-d013-41f1f7ee18eb",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get version request is correctly processed\"] = responseCode.code === 200;\n\n//Response body: JSON value check\nvar jsonData = JSON.parse(responseBody);\n\n//Verify the version of the API is 1.1.0\ntests[\"Verify the version of the API\"] = jsonData.version === \"1.1.0\";\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573438864,
			"name": "Get the Version of the API",
			"description": "This request will get the current version of the API",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "d4f585ae-7761-0a14-eec1-8e4edcc5a65c",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/categories/Test02",
			"folder": "d7b03691-76f6-6c70-6879-95f0cae37052",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema ={\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"id\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n \n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//dynamically saving the new category id generated in NewCategoryId Environment variable\npostman.setEnvironmentVariable(\"NewCategoryId\", jsonData.id);\n\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n//verify json values for first category\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Test Category02\";\ntests[\"Value of name variable should be \"+jsonData.id] = jsonData.id===\"Test02\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573423396,
			"name": "Delete a category which was created above by POST Request",
			"description": "Delete a category which was created above by POST Request",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "d586ba92-2669-6ca3-a8ad-476c85b053f2",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/services",
			"folder": "def6c25a-e326-20b9-729a-6ea608252a58",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \n\"type\": \"object\",\n  \"definitions\": {},\n  \"properties\": {\n    \"total\": {\n      \"type\": \"integer\",\n      },\n    \"limit\": {\n      \"type\": \"integer\",\n      },\n    \"skip\": {\n      \"type\": \"integer\",\n      },\n    \"data\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            },\n          \"name\": {\n            \"type\": \"string\",\n            },\n          \"createdAt\": {\n            \"type\": \"string\",\n            },\n          \"updatedAt\": {\n            \"type\": \"string\",\n            }\n        }\n      }\n    }\n  }\n}\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n\n\n//Verify that below mentioned variables are present\ntests[\"total variable is present\"] = responseBody.has(\"total\");\ntests[\"limit variable is present\"] = responseBody.has(\"limit\");\ntests[\"skip variable is present\"] = responseBody.has(\"skip\");\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//Validate json value for variable \"total\", \"limit\", \"skip\"\nvar jsonData = JSON.parse(responseBody);\ntests[\"total products variable value should be \"+jsonData.total] = jsonData.total===21;\ntests[\"limit variable value should be \"+jsonData.limit] = jsonData.limit===10;\ntests[\"skip variable value should be \"+jsonData.skip] = jsonData.skip===0;\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.data[0].id] = jsonData.data[0].id===1;\ntests[\"Value of name variable should be \"+jsonData.data[0].name] = jsonData.data[0].name===\"Geek Squad Services\";\ntests[\"Value of createdAt variable should be \"+jsonData.data[0].createdAt] = jsonData.data[0].createdAt===\"2016-11-17T17:56:35.881Z\";\ntests[\"Value of updatedAt variable should be \"+jsonData.data[0].updatedAt] = jsonData.data[0].updatedAt===\"2016-11-17T17:56:35.881Z\";\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573387670,
			"name": "Get all services",
			"description": "Returns all services that match the given filter criteria. If no filters are included, defaults to returning a paginated list of all services.\r\n\r\n",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "ec404985-20bd-e620-507c-82da0f4dcc5c",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/products/9999681",
			"folder": "320c6f0a-a473-efeb-9ff0-d7d669908055",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "var jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"type\": {\n      \"type\": \"string\",\n      },\n    \"price\": {\n      \"type\": \"integer\",\n      },\n    \"upc\": {\n      \"type\": \"string\",\n      },\n    \"shipping\": {\n      \"type\": \"integer\",\n      },\n    \"description\": {\n      \"type\": \"string\",\n      },\n    \"manufacturer\": {\n      \"type\": \"string\",\n      },\n    \"model\": {\n      \"type\": \"string\",\n      },\n    \"url\": {\n      \"type\": \"null\",\n      },\n    \"image\": {\n      \"type\": \"null\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Patch the new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"id is present\"] = responseBody.has(\"id\");\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"type is present\"] = responseBody.has(\"type\");\ntests[\"price is present\"] = responseBody.has(\"price\");\ntests[\"shipping is present\"] = responseBody.has(\"shipping\");\ntests[\"upc is present\"] = responseBody.has(\"upc\");\ntests[\"description is present\"] = responseBody.has(\"description\");\ntests[\"manufacturer is present\"] = responseBody.has(\"manufacturer\");\ntests[\"model is present\"] = responseBody.has(\"model\");\ntests[\"createdAt is present\"] = responseBody.has(\"createdAt\");\ntests[\"updatedAt is present\"] = responseBody.has(\"updatedAt\");\ntests[\"url is present\"] = responseBody.has(\"url\");\ntests[\"image is present\"] = responseBody.has(\"image\");\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of id variable should be \"+jsonData.id] = jsonData.id===9999681;\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"Electric Car\";\ntests[\"value of type variable should be \"+jsonData.type] = jsonData.type===\"Car\";\ntests[\"value of price variable should be \"+jsonData.price] = jsonData.price===898888;\ntests[\"value of shipping variable should be \"+jsonData.shipping] = jsonData.shipping===10000000;\ntests[\"value of upc variable should be \"+jsonData.upc] = jsonData.upc===\"12341234\";\ntests[\"value of description variable should be \"+jsonData.description] = jsonData.description===\"Electric car as future car\";\ntests[\"value of manufacturer variable should be \"+jsonData.manufacturer] = jsonData.manufacturer===\"Tesla\";\ntests[\"value of model variable should be \"+jsonData.model] = jsonData.model===\"ELECTRAZXI\";\ntests[\"value of url variable should be \"+jsonData.url] = jsonData.url===null;\ntests[\"value of image variable should be \"+jsonData.image] = jsonData.image===null;\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573501743,
			"name": "Update the product with id 9999681 with original type",
			"description": "Update the product with id 9999681 with original type",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n\r\n  \"type\": \"Car\"\r\n\r\n}"
		},
		{
			"id": "f4447433-fc7d-2097-9524-9350d8c43fb4",
			"headers": "",
			"headerData": [],
			"url": "{{baseURL}}/stores/{{NewStoreId}}",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "DELETE",
			"data": [],
			"dataMode": "params",
			"tests": "//To verify that product created has been deleted\n//Status code: Code is 404\ntests[\"Verify that the repeated Delete request is NOT processed\"] = responseCode.code === 404;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"message\": {\n      \"type\": \"string\",\n      },\n    \"code\": {\n      \"type\": \"integer\",\n      },\n    \"className\": {\n      \"type\": \"string\",\n      },\n    \"errors\": {\n      \"type\": \"object\"\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Verify that below mentioned variables are present\ntests[\"name is present\"] = responseBody.has(\"name\");\ntests[\"message is present\"] = responseBody.has(\"message\");\ntests[\"code is present\"] = responseBody.has(\"code\");\ntests[\"className is present\"] = responseBody.has(\"className\");\ntests[\"errors is present\"] = responseBody.has(\"errors\");\n\n\n//Validate json values\nvar jsonData = JSON.parse(responseBody);\ntests[\"value of name variable should be \"+jsonData.name] = jsonData.name===\"NotFound\";\ntests[\"value of code variable should be \"+jsonData.code] = jsonData.code===404;\ntests[\"value of className variable should be \"+jsonData.className] = jsonData.className===\"not-found\";\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573457695,
			"name": "Try deleting the deleted store-To verify that store created has been deleted",
			"description": "Try deleting the deleted store-To verify that store created has been deleted",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": []
		},
		{
			"id": "fbf3fe3e-c058-c923-6e98-120b0bfe7d19",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/stores/4",
			"folder": "13a4646b-8ca8-ddc7-69ef-60020e3996e4",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Validate schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        8921\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"TestingStore\"\n      ]\n    },\n    \"type\": {\n      \"$id\": \"/properties/type\",\n      \"type\": \"string\",\n      \"title\": \"The Type Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Testing\"\n      ]\n    },\n    \"address\": {\n      \"$id\": \"/properties/address\",\n      \"type\": \"string\",\n      \"title\": \"The Address Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"India\"\n      ]\n    },\n    \"address2\": {\n      \"$id\": \"/properties/address2\",\n      \"type\": \"string\",\n      \"title\": \"The Address2 Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"\"\n      ]\n    },\n    \"city\": {\n      \"$id\": \"/properties/city\",\n      \"type\": \"string\",\n      \"title\": \"The City Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"GGN\"\n      ]\n    },\n    \"state\": {\n      \"$id\": \"/properties/state\",\n      \"type\": \"string\",\n      \"title\": \"The State Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"HAR\"\n      ]\n    },\n    \"zip\": {\n      \"$id\": \"/properties/zip\",\n      \"type\": \"string\",\n      \"title\": \"The Zip Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"122001\"\n      ]\n    },\n    \"lat\": {\n      \"$id\": \"/properties/lat\",\n      \"type\": \"number\",\n      \"title\": \"The Lat Schema\",\n      \"default\": 0,\n      \"examples\": [\n        28.45949935913086\n      ]\n    },\n    \"lng\": {\n      \"$id\": \"/properties/lng\",\n      \"type\": \"number\",\n      \"title\": \"The Lng Schema\",\n      \"default\": 0,\n      \"examples\": [\n        77.02665710449219\n      ]\n    },\n    \"hours\": {\n      \"$id\": \"/properties/hours\",\n      \"type\": \"string\",\n      \"title\": \"The Hours Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\"\n      ]\n    },\n    \"updatedAt\": {\n      \"$id\": \"/properties/updatedAt\",\n      \"type\": \"string\",\n      \"title\": \"The Updatedat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    },\n    \"createdAt\": {\n      \"$id\": \"/properties/createdAt\",\n      \"type\": \"string\",\n      \"title\": \"The Createdat Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"2018-02-25T10:36:07.317Z\"\n      ]\n    }\n  }\n};\n\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\n\n//Test to verify that creating a new product test recieves response code as 200\nvar jsonData = JSON.parse(responseBody);\ntests[\"Creating a new product\"] = responseCode.code === 200;\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with type variable\"] = responseBody.has(\"type\");\ntests[\"data array is present with address variable\"] = responseBody.has(\"address\");\ntests[\"data array is present with address2 variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with city variable\"] = responseBody.has(\"address2\");\ntests[\"data array is present with state variable\"] = responseBody.has(\"state\");\ntests[\"data array is present with zip variable\"] = responseBody.has(\"zip\");\ntests[\"data array is present with lat variable\"] = responseBody.has(\"lat\");\ntests[\"data array is present with lng variable\"] = responseBody.has(\"lng\");\ntests[\"data array is present with hours variable\"] = responseBody.has(\"hours\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for new store\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id==4;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Minnetonka\";\ntests[\"Value of type variable should be \"+jsonData.type] = jsonData.type===\"Testing\";\ntests[\"Value of address variable should be \"+jsonData.address] = jsonData.address===\"13513 Ridgedale Dr\";\ntests[\"Value of city variable should be \"+jsonData.city] = jsonData.city===\"Hopkins\";\ntests[\"Value of state variable should be \"+jsonData.state] = jsonData.state===\"MN\";\ntests[\"Value of zip variable should be \"+jsonData.zip] = jsonData.zip===\"55305\";\ntests[\"Value of latitude variable should be \"+jsonData.lat] = jsonData.lat===44.969658;\ntests[\"Value of longitude variable should be \"+jsonData.lng] = jsonData.lng=== -93.449539;\ntests[\"Value of hours variable should be \"+jsonData.hours] = jsonData.hours===\"Mon: 10-9; Tue: 10-9; Wed: 10-9; Thurs: 10-9; Fri: 10-9; Sat: 10-9; Sun: 10-8\";",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573470813,
			"name": "Update the store with id 4 with original value of two variables",
			"description": "Update the store with id 4 with original value of two variables",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n\"name\": \"Minnetonka\",\r\n\"type\": \"Testing\"\r\n\r\n}"
		},
		{
			"id": "fbff57ff-8687-9d3a-19d7-0667f0541e94",
			"headers": "Content-Type: application/json\n",
			"headerData": [
				{
					"key": "Content-Type",
					"value": "application/json",
					"description": "",
					"enabled": true
				}
			],
			"url": "{{baseURL}}/services/1",
			"folder": "def6c25a-e326-20b9-729a-6ea608252a58",
			"queryParams": [],
			"preRequestScript": null,
			"pathVariables": {},
			"pathVariableData": [],
			"method": "PATCH",
			"data": [],
			"dataMode": "raw",
			"tests": "//Status code: Code is 200\ntests[\"Verify that the Get request is correct processed when retrieving all products\"] = responseCode.code === 200;\n\n//verify content type\ntests[\"Content-Type is present\"] = postman.getResponseHeader(\"Content-Type\");\n\n//response time is less than 500 sec\ntests[\"Response time is less than 500ms\"] = responseTime < 500;\n\n//Validate Schema\nvar jsonData = JSON.parse(responseBody);\nvar schema = {\n  \"type\": \"object\",\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      },\n    \"name\": {\n      \"type\": \"string\",\n      },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      },\n    \"createdAt\": {\n      \"type\": \"string\",\n      }\n  }\n}\n;\ntests[\"Valid schema\"] = tv4.validate(jsonData, schema);\nconsole.log(\"Validation failed: \", tv4.error);\n\n//Verify that below mentioned variables are present\ntests[\"data array is present with id variable\"] = responseBody.has(\"id\");\ntests[\"data array is present with name variable\"] = responseBody.has(\"name\");\ntests[\"data array is present with createdAt variable\"] = responseBody.has(\"createdAt\");\ntests[\"data array is present with updatedAt variable\"] = responseBody.has(\"updatedAt\");\n\n\n//verify json values for first product in data array\nvar jsonData = JSON.parse(responseBody);\ntests[\"Value of id variable should be \"+jsonData.id] = jsonData.id===1;\ntests[\"Value of name variable should be \"+jsonData.name] = jsonData.name===\"Testing PATCH\";\n\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1519573403837,
			"name": "Update the service's one variables using the service id ",
			"description": "Update the service's one variables using the service id ",
			"collectionId": "927cd550-9f1e-d8c3-eb35-d9b075a142cf",
			"responses": [],
			"rawModeData": "{\r\n   \"name\": \"Testing PATCH\"\r\n\r\n}"
		}
	]
}